version: '3'

services:
  userservice:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
      - "8006:8006"
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=user_db
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=db_user
      - DB_PORT=5432
      - REDIS_HOST=redis
    volumes:
      - ./UserService:/usr/src/app
      - ./logs/user_service:/var/log/user_service
    depends_on:
      - db_user
      - redis
    networks:
      - app-network

  task_service:
    build:
      context: ./TaskService
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=task_db
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=db_task
      - DB_PORT=5433
    volumes:
      - ./TaskService:/usr/src/app
    depends_on:
      - db_task
      - redis
    networks:
      - app-network

  notification_service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile  # Ensure this path points to the correct Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=notification_db
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_HOST=db_notification
      - DB_PORT=5434
    volumes:
      - ./NotificationService:/usr/src/app
    depends_on:
      - db_notification
      - redis
    networks:
      - app-network

  db_user:
    image: postgres:12
    environment:
      DB_DB: user_db
      DB_USER: user
      DB_PASSWORD: password
      POSTGRES_DB: user_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password  #
    ports:
      - "5432:5432"
    volumes:
      - db_user_data:/var/lib/postgresql/data
    networks:
      - app-network

  db_task:
    image: postgres:12
    environment:
      DB_DB: task_db
      DB_USER: user
      DB_PASSWORD: password
      POSTGRES_DB: task_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5433"
    networks:
      - app-network

  db_notification:
    image: postgres:12
    environment:
      DB_DB: notification_db
      DB_USER: user
      DB_PASSWORD: password
      POSTGRES_DB: notification_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5434"
    networks:
      - app-network


  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - userservice
      - task_service
      - notification_service
    networks:
      - app-network

  loki:
    image: grafana/loki:2.9.10
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - app-network

  promtail:
    image: grafana/promtail:2.9.0
    ports:
      - "9080:9080"
    volumes:
      - ./logs/user_service:/var/log/user_service
      - ./promtail/config.yml:/etc/promtail/config.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./promtail_positions:/etc/promtail/positions
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network



  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
      - loki
    networks:
      - app-network
  ui_service:
      build:
        context: ./UIMicroservice
        dockerfile: Dockerfile
      ports:
        - "8000:8000"
      environment:
        - USER_SERVICE_URL=http://userservice:8001
        - TASK_SERVICE_URL=http://task_service:8002
        - NOTIFICATION_SERVICE_URL=http://notification_service:8003
      depends_on:
        - userservice
        - task_service
        - notification_service
      networks:
        - app-network
networks:
  app-network:
    driver: bridge
volumes:
  db_user_data:
  db_task_data:
  loki_data: